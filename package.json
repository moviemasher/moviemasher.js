{
  "name": "@moviemasher/mono-repo",
  "description": "Movie Masher Mono Repository",
  "homepage": "https://moviemasher.com",
  "version": "5.1.2",
  "license": "MIT",
  "author": {
    "name": "Movie Masher",
    "email": "support@moviemasher.com"
  },
  "bugs": {
    "url": "https://github.com/moviemasher/moviemasher.js/issues"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/moviemasher/moviemasher.js.git"
  },
  "scripts": {
    "build-image-packages": "npm run build-image --image=build-packages",
    "build-image-docs": "npm run build-image --image=build-docs",
    "build-image-test-client": "npm run build-image --image=test-client",
    "build-image-test-shared": "npm run build-image --image=test-shared",
    "build-image-test-server": "npm run build-image --image=test-server",
    "build-image-node-ffmpeg": "npm run build-image --image=node-ffmpeg",
    "build-image-tests": "run-s build-image-test-shared build-image-test-client build-image-node-ffmpeg build-image-test-server",
    "build-builders": "run-s build-image-packages build-image-docs",
    "build-client": "npm run docker-run-with --with=client",
    "build-docs-contained": "run-s build-docs-markdown build-docs-typedoc",
    "build-docs-markdown": "markdown --ignore 'node_modules' --path './README.md'",
    "build-docs-typedoc": "typedoc --options ./typedoc.cjs",
    "build-docs": "npm run docker-run-with --with=docs",
    "build-image": "npm run docker-build --dir=images/${npm_config_image:=test-server}/dev",
    "build-package-json": "npm run cli packages",
    "build-packages": "npm run docker-run-with --with=packages",
    "build-plugin": "npm run docker-run-with --with=plugin",
    "build-space": "docker compose --env-file dev/local.env --file packages/builder/dev/docker-compose.yml run --rm service space --space=${npm_config_space:=test-server}",
    "build": "run-s build-package-json build-builders build-packages build-docs",
    "cli": "node dev/build/cli.mjs",
    "docker-build": "npm run docker-do --do='build' --dir=${npm_config_dir}",
    "docker-do": "docker compose --env-file dev/local.env --file ${npm_config_dir}/docker-compose.yml ${npm_config_do} service",
    "docker-down": "docker compose --env-file dev/local.env --file ${npm_config_dir:=packages}/${npm_config_space:=docs}/dev/docker-compose.yml down -v",
    "docker-logs": "docker compose --env-file dev/local.env --file ${npm_config_dir:=packages}/${npm_config_space:=docs}/dev/docker-compose.yml logs -f",
    "docker-run-non": "npm run docker-do --do='run -T --rm' --dir=${npm_config_dir}",
    "docker-run-with": "npm run docker-run-non --dir=images/build-${npm_config_with}/dev",
    "docker-run": "npm run docker-do --do='run -it --rm' --dir=${npm_config_dir}",
    "docker-up": "docker compose --env-file dev/local.env --file ${npm_config_dir:=packages}/${npm_config_space:=docs}/dev/docker-compose.yml up -d ${npm_config_service:=service}",
    "frameworks": "npm run cli frameworks",
    "logs": "npm run docker-logs --dir=${npm_config_dir:=examples} --space=${npm_config_space:=express}",
    "publish": "npm publish --access public --workspace @moviemasher/${npm_config_space}",
    "start-docs": "npm run start --dir=${npm_config_dir:=dev} --space=${npm_config_space:=docs}",
    "start-client": "npm run start --dir=${npm_config_dir:=packages/lib} --space=${npm_config_space:=client}",
    "start-static": "npm run start --dir=${npm_config_dir:=examples} --space=${npm_config_space:=static}",
    "start-server": "npm run start --dir=${npm_config_dir:=examples} --space=${npm_config_space:=express}",
    "start": "npm run docker-up --dir=${npm_config_dir:=packages/lib} --space=${npm_config_space:=client}",
    "stop-docs": "npm run stop --dir=${npm_config_dir:=dev} --space=${npm_config_space:=docs}",
    "stop-client": "npm run stop --dir=${npm_config_dir:=packages/lib} --space=${npm_config_space:=client}",
    "stop-server": "npm run stop --dir=${npm_config_dir:=examples} --space=${npm_config_space:=express}",
    "stop-static": "npm run stop --dir=${npm_config_dir:=examples} --space=${npm_config_space:=static}",
    "stop": "npm run docker-down --dir=${npm_config_dir:=packages/lib} --space=${npm_config_space:=client}",
    "test-client": "npm run docker-run --dir=images/test-client/dev",
    "test-shared": "run-s docker-run --dir=images/test-shared/dev",
    "test-server": "npm run docker-run --dir=images/test-server/dev",
    "test": "run-s test-shared test-server test-client",
    "versions": "echo \"NodeJs: $(node -v)\" ; echo \"NPM: $(npm -v)\" ; echo \"TypeScript: $(tsc -v)\""
  },
  "devDependencies": {
    "@types/node": "20.5.1",
    "npm-run-all": "4.1.5",
    "typescript": "5.1.3"
  },
  "workspaces": [
    "examples/*",
    "packages/lib/*",
    "packages/runtime/*",
    "images/*"
  ]
}
